{% set uid = this.getObject().getUid() %}
{% set mapParam = this.getObject().getParam('map') %}
{% set positions = this.getObject().getParamValue('map') %}
{% set color = this.getObject().getParamValue('colors') %}
{% set picto = this.getObject().getParamValue('picto') %}

{% set force_auto_height = force_auto_height is defined ? force_auto_height.value : false %}
{% if force_auto_height == false %}
    {% set height = this.getObject().getParamValue('height') %}
    {% if height is not null %}
        {% set height = height ~ 'px' %}
    {% endif %}
{% endif %}

{% set autoHeightClass = force_auto_height ? ' set-auto-height' : '' %}

<div {{ this.bbcontent(null, {'class': 'content map-wrapper' ~ resizeClass ~ autoHeightClass})|raw }}
    {% if force_auto_height %}
        data-forbidden-plugins = "resize"
        id="{{ uid }}"
    {% endif %}
>
    {% if positions is empty %}
        {% include 'common/missing_config_block.html.twig' %}
    {% else %}
        {% set map_id = 'map_' ~ uid %}
        {% set icon_img = this.getCdnImageUrl(picto)|raw %}
        <div
            id="{{ map_id }}"
            class="google-map resize-element"
            data-positions="{{ positions|json_encode|e('html_attr') }}"
            {% if height is not null %}style="height: {{height}};"{% endif %}
        ></div>
        <script>
            (function () {
                var script = document.createElement('script'),
                    scriptId = 'google-map-lib',
                    callback;

                if (window.googleMapLoaded === undefined) {
                    window.googleMapLoaded = false;
                }

                callback = function ()Â {
                    var latLng,
                        map,
                        colors,
                        color,
                        bounds,
                        marker,
                        iconImg;

                    var allowedImg = /(\.png)$/i;
                    var positions = JSON.parse(document.querySelector('#{{ map_id }}').dataset.positions);
                    if (!Array.isArray(positions)) {
                        positions = [positions];
                    }

                    var cleanPositions = [];
                    positions.forEach(function(position) {
                        if (!position.hasOwnProperty('lat') || !position.hasOwnProperty('lng')) {
                            return;
                        }

                        cleanPositions.push(position);
                    });
                    positions = cleanPositions;

                    if (allowedImg.exec('{{ icon_img }}')) {
                        iconImg = '{{ icon_img }}';
                    }

                    bounds = new google.maps.LatLngBounds();

                    // Create a map object and specify the DOM element for display.
                    var mapConfig = {};

                    if (positions.length === 1) {
                        mapConfig = {
                          center: {lat: positions[0].lat, lng: positions[0].lng},
                          zoom: 13,
                        };
                    }

                    map = new google.maps.Map(document.getElementById('{{ map_id }}'), mapConfig);

                    positions.forEach(function(position) {
                        marker = new google.maps.Marker({
                          map: map,
                          position: {lat: position.lat, lng: position.lng},
                          icon: iconImg,
                        });

                        if (positions.length > 1) {
                            bounds.extend({lat:position.lat, lng:position.lng});
                        }
                    });

                    if (positions.length > 1) {
                        map.fitBounds(bounds);
                        map.panToBounds(bounds);
                    }

                    colors = JSON.parse("{{ colors['colors']|json_encode() }}".replace(/&quot;/g,'"'));
                    color = colors["{{ color }}"];


                    map.setOptions({styles: color });
                };

                var script = document.getElementById(scriptId);
                if (null === script) {
                    script = document.createElement('script')
                    script.src = 'https://maps.googleapis.com/maps/api/js?key={{ mapParam.api_key }}';
                    script.id = scriptId;

                    script.addEventListener('load', function() {
                        window.googleMapLoaded = true;
                        callback();
                    }, false);

                    document.getElementsByTagName('head')[0].appendChild(script);
                } else {
                    if (!window.$) {
                        script.addEventListener('load', callback, false);
                    } else {
                        callback();
                    }
                }
            })()
        </script>
        {% if force_auto_height == true %}
            <script>
                (function () {
                    var init = function () {
                    $(window).on('load resize', function() {
                        const $rowItemWithMap = $('#{{ uid }}.set-auto-height').parents('.row-item');
                        const $mapRowItems = $rowItemWithMap.siblings('.row-item');
                        var mapMaxHeight = 40;

                        $mapRowItems.each(function() {
                            mapMaxHeight = mapMaxHeight > $(this).height() ? mapMaxHeight : $(this).height();
                        });

                        $rowItemWithMap.height(mapMaxHeight);
                    });
                    };

                    if (document.readyState === 'complete' || document.readyState === 'loaded') {
                        init();
                    } else {
                        document.addEventListener('DOMContentLoaded', init);
                    }
                })();
            </script>
        {% endif %}
    {% endif %}
</div>
