{% if hide_content is not defined %}
  {% set rowId = "row_" ~ this.getObject().getUid() %}
  {% set containerId = "container_" ~ this.getObject().getUid() %}


  {% set data = this.getObject().getData() %}
  {% set default_colsize = data|length ? 12 / data|length : '12' %}

  {% set backgroundImage = this.getObject().getParamValue('bg_image') %}
  {% set backgroundPosition = this.getObject().getParamValue('bg_image_position_y') %}
  {% set withParallax = this.getObject().getParamValue('bg_parallax') %}

  {% set spacerClass = '' %}

  {% set tabletMaxItem = 4 %}
  {% if responsive_tablet.value.nb_item_max is defined and responsive_tablet.value.nb_item_max >= 0 %}
    {% set tabletMaxItem = responsive_tablet.value.nb_item_max %}
  {% endif %}

  {% set mobileMaxItem = 4 %}
  {% if responsive_mobile.value.nb_item_max is defined and responsive_mobile.value.nb_item_max >= 0 %}
    {% set mobileMaxItem = responsive_mobile.value.nb_item_max %}
  {% endif %}

  {% set mobileNbItem = null %}
  {% if responsive_mobile.value.nb_item is defined and responsive_mobile.value.nb_item > 0 %}
    {% if data|length < responsive_mobile.value.nb_item %}
      {% set mobileNbItem = 12 / data|length %}
    {% else %}
      {% set mobileNbItem = 12 / responsive_mobile.value.nb_item %}
    {% endif %}
  {% endif %}

  {% set tabletNbItem = null %}
  {% if responsive_tablet.value.nb_item is defined and responsive_tablet.value.nb_item > 0 %}
    {% if data|length < responsive_tablet.value.nb_item %}
      {% set tabletNbItem = 12 / data|length %}
    {% else %}
      {% set tabletNbItem = 12 / responsive_tablet.value.nb_item %}
    {% endif %}
  {% endif %}

  {% set mobileClass = '' %}
  {% if responsive_tablet.value.rendermode %}
    {% set mobileClass = responsive_mobile.value.rendermode ~ '_mobile'  %}
  {% endif %}

  {% set tabletClass = '' %}
  {% if responsive_tablet.value.rendermode %}
    {% set tabletClass = responsive_tablet.value.rendermode ~ '_tablet'  %}
  {% endif %}

  {% if data|length == 1 and data[0]|length == 1 %}
    {% if this.getObject().first().first().getContentType() == 'Basic/Spacer' %}
      {% set spacerClass = 'is-spacer ' %}
    {% endif %}
  {% endif %}

  {% set overlayClass = '' %}
  {% set hasOverlay = this.getObject().getParamValue('bg_overlay') %}
  {% if hasOverlay %}
    {% set overlayClass = 'row-overlay' %}
  {% endif %}

  {% set blurClass = '' %}
  {% set bgBlur = this.getObject().getParamValue('bg_blur') %}
  {% if bgBlur %}
    {% set blurClass = 'bg-blur' %}
  {% endif %}

  {% set noPaddingClass = '' %}
  {% if remove_padding.value == true %}
    {% set noPaddingClass = 'p-0' %}
  {% endif %}

  {% set verticalAlignClass = '' %}
  {% if vertical_align.value == true %}
    {% set verticalAlignClass = 'align-item-center' %}
  {% endif %}

  {% set parallaxClass = '' %}
  {% if withParallax %}
    {% set parallaxClass = 'bg-parallax' %}
  {% endif %}

  {% set bgColorClass = '' %}
  {% if bg_color.value == true %}
    {% set bgColorClass = 'has-bg-color' %}
  {% endif %}

  {% if row_extra_css_classes is not defined %}
    {% set row_extra_css_classes = '' %}
  {% endif %}

  {% set settings = this.getDesignSettings('button') %}

  {% if bg_video_url %}
    <div id="{{rowId}}"
      {{this.bbcontent(null, {class: spacerClass ~ 'background-video-row cloudcontentset ' ~ bgColorClass ~ ' ' ~ bg_color.value ~ ' ' ~ tabletClass ~ ' ' ~ mobileClass ~ ' ' ~ overlayClass ~ ' ' ~ noPaddingClass ~ ' ' ~ blurClass ~ ' ' ~ verticalAlignClass})|raw}}
      style="{% if false != backgroundImage and true != withParallax %}background-image:url({{backgroundImage|raw}}); background-size:cover; background-position-y: {{ backgroundPosition }}; {% endif %}
             {% if height.value %}{% if this.userAgentHelper.isMobile() and height.value > 60 %}padding-top: {{ height.value / 2 }}px; padding-bottom: {{ height.value / 2 }}px;{% else %}padding-top: {{ height.value }}px; padding-bottom: {{ height.value }}px;{% endif %}{% endif %}"
      {% if false != backgroundImage and withParallax %} data-bb-image="{{backgroundImage|raw}}"{% endif %}
    >

      {% if this.userAgentHelper.isDesktop() %}
        <div class="bg-video-wrapper">
          <div data-id="{{ bg_video_id }}"></div>
          <script type="text/javascript">
            var init = function() {
              if (typeof(YT) == 'undefined') {
                var tag = document.createElement('script');
                tag.src = "https://www.youtube.com/iframe_api";
                var firstScriptTag = document.getElementsByTagName('script')[0];
                firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
              } else {
                 onYouTubeIframeAPIReady();
                 videoResize();
              }

              var player;
              window.onYouTubeIframeAPIReady = function() {
                var players = $('[data-id="{{ bg_video_id }}"]');
                var playerVars = {
                  color: 'white',
                  loop: '1',
                  showinfo: '0',
                  controls: '0',
                  autoplay: '1',
                };
                var videoStartAt = {{ bg_video_start_at ?: 'false' }};
                var videoEndAt = {{ bg_video_end_at ?: 'false' }};

                if (videoStartAt) {
                  playerVars.start = videoStartAt;
                }

                if (videoEndAt) {
                  playerVars.end = videoEndAt;
                }

                for (var i = 0; i < players.length; i++) {
                  playerVars.playlist = players[i].dataset.id;

                  new YT.Player(players[i], {
                    videoId: players[i].dataset.id,
                    events: {
                      'onReady': onPlayerReady,
                      'onStateChange': onPlayerStateChange
                    },
                    playerVars: playerVars
                  });
                }
              }

              window.onPlayerReady = function (event) {
                event.target.setVolume(0);
                event.target.playVideo();
              }

              window.onPlayerStateChange = function (event) {
                if (event.data == YT.PlayerState.PLAYING) {
                  $('.bg-video-wrapper').css('opacity', '1');
                  $('.bg-video-wrapper iframe').css('opacity', '1');
                } else {
                  $('.bg-video-wrapper').css('opacity', '0');
                  $('.bg-video-wrapper iframe').css('opacity', '0');
                }
              }

              window.videoResize = function () {
                var $iframeVideo = $('.bg-video-wrapper iframe');
                var $row = $iframeVideo.parents('.background-video-row');

                var w = $row.outerWidth(),
                    h = $row.outerHeight();

                if (w/h > 16/9){
                  $iframeVideo.css({'width': w, 'height': w/16*9, 'left': '0'});
                } else {
                  $iframeVideo.css({'width': h/9*16, 'height': h, 'left': -(h/9*16-w)/2});
                }
              }


                $(window).on('load resize', function(){
                  var loop;
                  var callback = function () {
                    var height = $('.bg-video-wrapper iframe').css('height');
                    if (height) {
                      videoResize();

                      if (loop) {
                        window.clearInterval(loop);
                      }
                    }
                  };

                  callback();
                  loop = setInterval(callback, 1000);
                });
            };

            if (window.$) {
                init();
            } else {
                document.addEventListener('DOMContentLoaded', init, true);
            }
          </script>
        </div>
      {% endif %}
      <div id="{{containerId}}" class="{{ width.value }}{% if button_collapse_enable.value %} collapse fade{% if bb.token != null %} show{% endif %}{% endif %}{% if remove_gutter.value %} px-0{% endif %}">
        <div class="row{% if remove_gutter.value %} no-gutters{% endif %}{% if row_extra_css_classes %} {{ row_extra_css_classes }}{% endif %}" {% if bg_video_url %}id="rowheight"{% endif %}>
        {% for key, content in data %}
          {% set colsize = this.getObject().getParamValue('blocksize')[loop.index0] %}
          {% set colsize = colsize ? colsize : default_colsize %}
          {% set colClass = colsize >= 6 ? 'large-col' : 'small-col' %}
          <div class="row-item {% if mobileNbItem != null %}col-{{mobileNbItem}}{% endif %} {% if tabletNbItem != null %}col-md-{{tabletNbItem}}{% endif %} col-lg-{{ colsize }} {{ colClass }}{% if key >= mobileMaxItem %} hidden-xs{% endif %} {% if key >= tabletMaxItem %} hidden-sm{% endif %}" >
          {{this.render(content, this.getMode(), {'multi_column': data|length > 1, 'col_width': width.value, 'colsize': colsize, 'in_fluid': width.value == 'container-fluid'}, null, this.getIgnoreIfNotAvailable())|raw}}
          </div>
        {% endfor %}
        </div>
      </div>
      {% if button_collapse_enable.value %}
      <div class="{{ width.value }}">
        <div class="row text-center my-3">
          <div class="col-12">
            <button class="btn button-collapse color-primary {{ button_collapse_color.value }} btn-{{ button_collapse_size.value }} btn-{{ button_collapse_form_solid.value == false ? 'outline' }} btn-{{ settings.shape }}"
              data-toggle="collapse" data-target="#{{containerId}}" data-strat-open="{{ this.trans('button.collapse.open') }}" data-strat-close="{{ this.trans('button.collapse.close') }}"
              {% if settings.font %}style="font-family: {{ settings.font }}"{% endif %}
            >
              {% if bb.token == null %}
                {{ this.trans('button.collapse.close') }}
              {% else %}
                {{ this.trans('button.collapse.open') }}
              {% endif %}
            </button>
          </div>
        </div>
      </div>
      {% endif %}
    </div>
  {% else %}
    <div id="{{rowId}}" {{this.bbcontent(null, {class: spacerClass ~ 'cloudcontentset ' ~ bgColorClass ~ ' ' ~ bg_color.value ~ ' ' ~ tabletClass ~ ' ' ~ mobileClass ~ ' ' ~ overlayClass ~ ' ' ~ noPaddingClass ~ ' ' ~ parallaxClass ~ ' ' ~ blurClass ~ ' ' ~ verticalAlignClass})|raw}} style="{% if false != backgroundImage %}background-image:url({{backgroundImage|raw}}); background-size:cover; background-position-y: {{ backgroundPosition }}; {% endif %} {% if height.value %}{% if this.userAgentHelper.isMobile() and height.value > 60 %}padding-top: {{ height.value / 2 }}px; padding-bottom: {{ height.value / 2 }}px;{% else %}padding-top: {{ height.value }}px; padding-bottom: {{ height.value }}px;{% endif %}{% endif %}"{% if false != backgroundImage and withParallax %} data-bg-y="{{ backgroundPosition }}" data-bb-image="{{backgroundImage|raw}}"{% endif %}>
      <div id="{{containerId}}" class="{{ width.value }}{% if button_collapse_enable.value %} collapse fade{% if bb.token != null %} show{% endif %}{% endif %}{% if remove_gutter.value %} px-0{% endif %}">
        <div class="row{% if remove_gutter.value %} no-gutters{% endif %}{% if row_extra_css_classes %} {{ row_extra_css_classes }}{% endif %}" {% if bg_video_url %}id="rowheight"{% endif %}>
        {% for key, content in data %}
          {% set colsize = this.getObject().getParamValue('blocksize')[loop.index0] %}
          {% set colsize = colsize ? colsize : default_colsize %}
          {% set colClass = colsize >= 6 ? 'large-col' : 'small-col' %}
          <div class="row-item {% if mobileNbItem != null %}col-{{mobileNbItem}}{% endif %} {% if tabletNbItem != null %}col-md-{{tabletNbItem}}{% endif %} col-lg-{{ colsize }} {{ colClass }}{% if key >= mobileMaxItem %} hidden-xs{% endif %}{% if key >= tabletMaxItem %} hidden-sm{% endif %}">
          {{this.render(content, this.getMode(), {'multi_column': data|length > 1, 'col_width': width.value, 'colsize': colsize, 'in_fluid': width.value == 'container-fluid'}, null, this.getIgnoreIfNotAvailable())|raw}}
          </div>
        {% endfor %}
        </div>
      </div>
      {% if button_collapse_enable.value %}
      <div class="{{ width.value }}">
        <div class="row text-center my-3">
          <div class="col-12">
            <button class="btn button-collapse color-primary {{ button_collapse_color.value }} btn-{{ button_collapse_size.value }} btn-{{ button_collapse_form_solid.value == false ? 'outline' }} btn-{{ settings.shape }}"
              data-toggle="collapse" data-target="#{{containerId}}" data-strat-open="{{ this.trans('button.collapse.open') }}" data-strat-close="{{ this.trans('button.collapse.close') }}"
              {% if settings.font %}style="font-family: {{ settings.font }}"{% endif %}
            >
              {% if bb.token == null %}
                {{ this.trans('button.collapse.close') }}
              {% else %}
                {{ this.trans('button.collapse.open') }}
              {% endif %}
            </button>
          </div>
        </div>
      </div>
      {% endif %}
    </div>
  {% endif %}
{% endif %}
