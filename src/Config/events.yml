# Application listeners

bbapplication.init:
    listeners:
        - [ BackBee\DependencyInjection\Listener\ContainerListener, onApplicationInit, -8000 ]
        - [ BackBee\ClassContent\Listener\ClassContentListener, onApplicationInit ]
        - [ BackBee\Renderer\Listener\TwigListener, onApplicationReady ]
        # BackBee Cloud listeners
        - [ '@core.core.listener', forceClassContentLoadOnApplicationInit, -7999 ]
        - [ '@core.core.listener', onApplicationInit, 200 ]
        - [ BackBeeCloud\Listener\PageListener, onApplicationInit ]
        - [ BackBeeCloud\Listener\UserRightListener, onApplicationInit ]
        - [ "@cloud.classcontent_overrider.listener", onApplicationInit, -7998 ]
        - [ '@core.sitemap.listener', onApplicationInit ]

bbapplication.start:
    listeners:
        # BackBee Cloud listeners
        - [ '@core.core.listener', onApplicationStart, -50 ]

bbapplication.stop:
    listeners:
        - [ BackBee\Bundle\Listener\BundleListener, onApplicationStop ]

# Config listeners

service.tagged.config_per_site:
    listeners:
        - [ @config.configurator, onGetServiceConfig ]


# Kernel listeners

kernel.request:
    listeners:
        - [ @profiler.listener, onKernelRequest ]
        # BackBee Cloud listeners
        - [ BackBeeCloud\Listener\RequestListener, onKernelRequest ]

kernel.exception:
    listeners:
        - [ @rest.listener.exception, onKernelException ]
        - [ @exception.listener, onKernelException ]
        # BackBee Cloud listeners
        - [ BackBeeCloud\Listener\Api\UserRightListener, onKernelException, 100 ]
        - [ "@cloud.api.user_controller.listener", onKernelException, 100 ]
        - [ BackBeeCloud\Listener\PageListener, onPageNotFoundException, 100 ]
        - [ @cloud.disqus_listener, onDisqusControlledException, 100 ]
        - [ '@core.core.listener', onAuthenticationException, 100 ]
        - [ "@api.multilang.listener", onMultiLangException, 100 ]
        - [ '@core.core.listener', onKernelException, 50 ]
        - [ BackBeeCloud\ReCaptcha\ReCaptchaListener, onRecaptchaFailedValidationException, 100 ]

kernel.controller:
    listeners:
        - [ @rest.listener.param_converter, onKernelController ]
        - [ @rest.listener.security, onKernelController ]
        - [ @rest.listener.validation, onKernelController ]
        - [ @rest.listener.pagination, onKernelController ]
        # BackBee Cloud listeners
        - [ '@core.core.listener', onKernelController ]
        - [ "@cloud.api.user_right.listener", onKernelController ]

kernel.response:
    listeners:
        - [ @profiler.toolbar.listener, onKernelResponse ]
        - [ @profiler.listener, onKernelResponse ]
        - [ "@cloud.theme_color.listener", onKernelResponse ]
        - [ "@cloud.favicon.listener", onKernelResponse ]
        - [ BackBeeCloud\Listener\PrivacyPolicyListener, onKernelResponse ]
        - [ '@core.cache.listener', onKernelResponse, -8000 ]

# ClassContent listeners

classcontent.include:
    listeners:
        - [ BackBee\ClassContent\Listener\ClassContentListener, onInclude ]

classcontent.postload:
    listeners:
        - [ BackBee\ClassContent\Listener\ClassContentListener, onPostload ]

classcontent.update:
    listeners:
        - [ BackBee\ClassContent\Listener\ClassContentListener, onUpdate ]

element.file.postremove:
    listeners:
        - [ BackBee\ClassContent\Listener\ClassContentListener, onRemoveElementFile ]

classcontent.onflush:
    listeners:
        - [ BackBee\ClassContent\Listener\ClassContentListener, onFlushContent ]

classcontent.prerender:
    listeners:
        - [ BackBee\ClassContent\Listener\RevisionListener, onPrerenderContent ]

revision.postload:
    listeners:
        - [ BackBee\ClassContent\Listener\RevisionListener, onPostLoad ]

revision.onflush:
    listeners:
        - [ BackBee\ClassContent\Listener\RevisionListener, onFlushElementFile ]
        - [ '@core.class_content.video.listener', onVideoRevisionFlush ]

basic.searchresult.render:
    listeners:
        # BackBee Cloud listeners
        - [ BackBeeCloud\Listener\ClassContent\SearchResultListener, onRender ]

media.video.render:
    listeners:
        # BackBee Cloud listeners
        - [ '@core.class_content.video.listener', onRender ]

media.soundcloud.render:
    listeners:
        # BackBee Cloud listeners
        - [ BackBeeCloud\Listener\ClassContent\SoundcloudListener, onRender ]

social.tweet.render:
    listeners:
        # BackBee Cloud listeners
        - [ BackBeeCloud\Listener\ClassContent\TweetListener, onRender ]

article.articletitle.render:
    listeners:
        # BackBee Cloud listeners
        - [ BackBeeCloud\Listener\ArticleTitleListener, onRender ]

basic.menu.prepersist:
    listeners:
        # BackBee Cloud listeners
        - [ "@api.multilang.listener", onMenuPrePersist, 100 ]
        - [ "@core.menu.listener", onPrePersist ]

basic.menu.render:
    listeners:
        # BackBee Cloud listeners
        - [ "@core.menu.listener", onRender ]
        - [ "@api.multilang.listener", onMenuRender ]

contentautoblock.render:
    listeners:
        # BackBee Cloud listeners
        - [ BackBeeCloud\Listener\ContentAutoblockListener, onRender ]

content.highlightcontent.render:
    listeners:
        # BackBee Cloud listeners
        - [ '@cloud.highlightcontent.listener', onRender ]

element.image.onflush:
    listeners:
        # BackBee Cloud listeners
        - [ @cloud.image_listener, onImageFlush ]

basic.slider.prepersist:
    listeners:
        # BackBee Cloud listeners
        - [ BackBeeCloud\Listener\ClassContent\ContentListener, onSliderPrePersist ]

content.duplicate.presave:
    listeners:
        # BackBee Cloud listeners
        - [ BackBeeCloud\Listener\ClassContent\ContentListener, onContentDuplicatePreSave ]

cloudcontentset.render:
    listeners:
        # BackBee Cloud listeners
        - [ BackBeeCloud\Listener\ClassContent\ContentListener, onCloudContentSetRender ]
        - [ @cloud.image_listener, onCloudContentSetRender ]
        - [ BackBeeCloud\Listener\ClassContent\CardListener, onCloudContentSetRender ]
        - [ "@cloud.auto_height_content.listener", onCloudContentSetRender ]
        # Optimize image listeners
        - [ '@app.optimize_image.listener', onCloudContentSetRender ]

basic.contact.render:
    listeners:
        # BackBee Cloud listeners
        - [ BackBeeCloud\ReCaptcha\ReCaptchaListener, onContentRequireReCaptchaRender ]

basic.pagebytagresult.render:
    listeners:
        # BackBeeCloud listeners
        - [ BackBeeCloud\Listener\ClassContent\PageByTagResultListener, onRender ]

basic.newsletter.render:
    listeners:
        # BackBee Cloud listeners
        - [ BackBeeCloud\ReCaptcha\ReCaptchaListener, onContentRequireReCaptchaRender ]

basic.cards.render:
    listeners:
        # BackBee Cloud listeners
        - [ BackBeeCloud\Listener\ClassContent\CardListener, onRender ]

contentset.render:
    listeners:
        # BackBee Cloud listeners
        - [ BackBeeCloud\Listener\ClassContent\ContentSetListener, onRender ]

comment.disqus.render:
    listeners:
        # BackBee Cloud listeners
        - [ '@cloud.disqus_listener', onRender ]

# Controller listeners

rest.controller.classcontentcontroller.getaction.postcall:
    listeners:
        - [ BackBee\ClassContent\Listener\ClassContentListener, onPostCall ]
        # BackBee Cloud listeners
        - [ '@cloud.highlightcontent.listener', onPostCall ]
        - [ BackBeeCloud\Listener\ContentAutoblockListener, onPostCall ]

frontcontroller.request:
    listeners:
        - [ @rest.listener.body, onRequest ]

rest.controller.classcontentcontroller.postaction.precall:
    listeners:
        # BackBee Cloud listeners
        - [ @cloud.disqus_listener, onCreateContent ]

rest.controller.classcontentcontroller.postaction.postcall:
    listeners:
        # BackBee Cloud listeners
        - [ BackBeeCloud\Listener\PageListener, onRestContentUpdatePostcall ]

rest.controller.classcontentcontroller.putaction.postcall:
    listeners:
        # BackBee Cloud listeners
        - [ BackBeeCloud\Listener\PageListener, onRestContentUpdatePostcall ]

rest.controller.securitycontroller.deletesessionaction.postcall:
    listeners:
        # BackBee Cloud listeners
        - [ '@core.cache.listener', onLogoutPostCall ]

rest.controller.securitycontroller.authenticateaction.postcall:
    listeners:
        # BackBee Cloud listeners
        - [ '@core.cache.listener', onAuthenticationPostCall ]

rest.controller.classcontentcontroller.getcategorycollectionaction.postcall:
    listeners:
        # BackBee Cloud listeners
        - [ BackBeeCloud\Listener\PageTypeListener, onGetCategoryPostCall ]
        - [ '@content.category_listener', onGetCategoryPostCall ]
        - [ '@core.cache.listener', onGetCategoryPostCall ]

rest.controller.pagecontroller.deleteaction.postcall:
    listeners:
        # BackBee Cloud listeners
        - [ '@core.cache.listener', onChangePostCall ]
        - [ BackBeeCloud\Listener\ElasticsearchListener, onPageDeletePostcall ]
        - [ BackBeeCloud\Listener\PageListener, onPageDeletePostcall ]

rest.controller.resourcecontroller.uploadaction.postcall:
    listeners:
        # BackBee Cloud listeners
        - [ @cloud.image_listener, onUploadPostCall ]
        # Optimize image listeners
        - [ '@app.optimize_image.listener', onImageUploadPostCall ]

rest.controller.bundlecontroller.getcollectionaction.postcall:
    listeners:
        # BackBee Cloud listeners
        - [ BackBeeCloud\Listener\BundleListener, onGetCollectionPostCall ]
        - [ "@cloud.api.user_right.listener", onBundleGetCollectionPostCall ]

controller.frontcontroller.rssaction.precall:
    listeners:
        # BackBee Cloud listeners
        - [ BackBeeCloud\Listener\PageListener, onRssActionPreCall ]

controller.frontcontroller.defaultaction.precall:
    listeners:
        # BackBee Cloud listeners
        - [ "@api.multilang.listener", onHomePreCall, 100 ]

backbeecloud.api.controller.contentcontroller.delete.precall:
    listeners:
        # BackBee Cloud listeners
        - [ @cloud.disqus_listener, onDeleteContent ]

backbeecloud.api.controller.contentcontroller.delete.postcall:
    listeners:
        # BackBee Cloud listeners
        - [ BackBeeCloud\Listener\PageListener, onRestContentUpdatePostcall ]

backbeecloud.api.controller.pagecontroller.put.postcall:
    listeners:
        # BackBee Cloud listeners
        - [ '@core.cache.listener', onChangePostCall ]

backbeecloud.api.controller.tagcontroller.put.postcall:
    listeners:
        # BackBee Cloud listeners
        - [ '@core.cache.listener', onChangePostCall ]

backbeecloud.api.controller.tagcontroller.delete.postcall:
    listeners:
        # BackBee Cloud listeners
        - [ '@core.cache.listener', onChangePostCall ]

backbeecloud.api.controller.contentcontroller.publish.postcall:
    listeners:
        # BackBee Cloud listeners
        - [ '@core.cache.listener', onPublishPostCall ]

backbeecloud.api.controller.contentcontroller.publishall.postcall:
    listeners:
        # BackBee Cloud listeners
        - [ '@core.cache.listener', onPublishAllPostCall ]

backbeecloud.controller.contactcontroller.send.precall:
    listeners:
        # BackBee Cloud listeners
        - [ BackBeeCloud\ReCaptcha\ReCaptchaListener, onReCaptchaFormSubmissionPreCall ]

backbeecloud.controller.newslettercontroller.send.precall:
    listeners:
        # BackBee Cloud listeners
        - [ BackBeeCloud\ReCaptcha\ReCaptchaListener, onReCaptchaFormSubmissionPreCall ]

backbeecloud.api.controller.userpreferencecontroller.put.postcall:
    listeners:
        # BackBee Cloud listeners
        - [ '@core.cache.listener', onChangePostCall ]

backbeecloud.api.controller.userpreferencecontroller.delete.postcall:
    listeners:
        # BackBee Cloud listeners
        - [ '@core.cache.listener', onChangePostCall ]

rest.controller.usercontroller.getcollectionaction.postcall:
    listeners:
        # BackBee Cloud listeners
        - [ "@cloud.api.user_controller.listener", onGetCollectionPostCall ]

rest.controller.usercontroller.getaction.postcall:
    listeners:
        # BackBee Cloud listeners
        - [ "@cloud.api.user_controller.listener", onGetPostCall ]

rest.controller.usercontroller.getcurrentaction.postcall:
    listeners:
        # BackBee Cloud listeners
        - [ "@cloud.api.user_controller.listener", onGetPostCall ]

rest.controller.usercontroller.postaction.postcall:
    listeners:
        # BackBee Cloud listeners
        - [ "@cloud.api.user_controller.listener", onRestUserPostActionPostCall ]

rest.controller.usercontroller.putaction.postcall:
    listeners:
        # BackBee Cloud listeners
        - [ "@cloud.api.user_controller.listener", onRestUserPutActionPostCall ]

# Page and Section listeners

nestednode.page.postload:
    listeners:
        - [ @nestednode.page_listener, onPostLoad ]

nestednode.section.preupdate:
    listeners:
        - [ BackBee\Event\Listener\PageListener, onPreUpdate ]

nestednode.page.preupdate:
    listeners:
        - [ BackBee\Event\Listener\PageListener, onPreUpdate ]
        - [ BackBee\Workflow\Listener\PageListener, onPreUpdate ]

nestednode.page.onflush:
    listeners:
        - [ BackBee\Event\Listener\PageListener, onFlushPage ]
        - [ BackBee\Event\Listener\RewritingListener, onFlushPage ]
        - [ BackBee\MetaData\Listener\MetaDataListener, onFlushPage, -100 ]
        # BackBee Cloud listeners
        - [ BackBeeCloud\Listener\PageListener, onFlush ]
        - [ BackBeeCloud\Listener\PageListener, handleUriCollisionOnFlushPage ]

nestednode.page.postremove:
    listeners:
        # BackBee Cloud Listener
        - [ BackBeeCloud\Listener\PageListener, onPostRemove ]
        - [ BackBeeCloud\Listener\PageListener, onPagePostChange ]

# PageType listeners
backbeecloud.entity.pagetype.postload:
    listeners:
        # BackBee Cloud listeners
        - [ BackBeeCloud\Listener\PageTypeListener, onPostload ]

nestednode.page.postpersist:
    listeners:
        # BackBee Cloud listeners
        - [ BackBeeCloud\Listener\PageListener, onPagePostChange ]

nestednode.page.postupdate:
    listeners:
        # BackBee Cloud listeners
        - [ BackBeeCloud\Listener\PageListener, onPagePostChange ]

nestednode.page.render:
    listeners:
        # BackBee Cloud listeners
        - [ BackBeeCloud\Listener\PageListener, onPageRender ]
        - [ "@api.multilang.listener", onPageRender ]

nestednode.page.postrender:
    listeners:
        # BackBee Cloud listeners
        - [ BackBeeCloud\Listener\PageListener, onPostRender ]

# User listeners
rest.user.creation:
    listeners:
        # BackBee Cloud listeners
        - [ "@cloud.api.user_controller.listener", onRestUserCreationEvent ]

# User Right listeners
backbeecloud.api.controller.pagetypecontroller.getcollection.postcall:
    listeners:
        # BackBee Cloud listeners
        - [ "@cloud.api.user_right.listener", onPageTypeGetCollectionPostCall ]

# Optimize image
basic.image.render:
    listeners:
        - [ '@app.optimize_image.listener', onBasicImageRender ]